from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import Document, Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Filter
import loguru
import sys
from funcs import *
import requests
from blockcypher import get_block_overview
import asyncio
import os
import pickle
from loguru import logger

try:
    # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é data –∏–∑ —Ñ–∞–π–ª–∞ 'save.pkl'
    with open('save.pkl', 'rb') as read:
        API_TOKEN = pickle.load(read)
except:
    API_TOKEN = input('–í–≤–µ–¥–∏—Ç–µ API —Ç–æ–∫–µ–Ω:\n> ')
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é data –≤ —Ñ–∞–π–ª 'save.pkl'
    with open('save.pkl', 'wb') as write:
        pickle.dump(API_TOKEN, write)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
loguru.logger.add(
    "logs/{time:YYYY-MM-DD}.log",
    rotation="7 days",
    level="DEBUG"
)


class CallbackDataFilter(Filter):
    def __init__(self, data: str):
        self.data = data

    async def check(self, callback_query: CallbackQuery):
        return callback_query.data == self.data


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dispatcher = Dispatcher(bot, storage=storage)
loguru.logger.debug('–ë–æ—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω')


class Form(StatesGroup):
    block_id = State()
    addr = State()


inline_keyboard = InlineKeyboardMarkup()

button_last = InlineKeyboardButton('üîç –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫', callback_data='last')
button_exchange = InlineKeyboardButton('üí∞ –ö—É—Ä—Å –ë–∏—Ç–∫–æ–∏–Ω–∞', callback_data='exchange')
button_block = InlineKeyboardButton('üîó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–µ', callback_data='block')
button_balance = InlineKeyboardButton('üíº –ë–∏—Ç–∫–æ–∏–Ω –∫–æ—à–µ–ª–µ–∫', callback_data='balance')
inline_keyboard.add(button_last)
inline_keyboard.add(button_exchange)
inline_keyboard.add(button_block)
inline_keyboard.add(button_balance)

menu_keyboard = InlineKeyboardMarkup()

menu_button_text = InlineKeyboardButton('‚óÄÔ∏è –í –º–µ–Ω—é', callback_data='menu')

menu_keyboard.add(menu_button_text)

menu_sticker = 'CAACAgIAAxkBAAEHi25j2o75xyB-m8C3s4ITgCo7JWPEmQACph8AAv0RsEpbI3U8YSp1vy4E'
last_sticker = 'CAACAgIAAxkBAAEHi4Nj2pISiR7ub3J2ZJoFKgpZLkCFagACKCkAAtjzqErya_sR6K2N4i4E'
exchange_sticker = 'CAACAgIAAxkBAAEHi4Vj2pI1uvDP9bz6NoJuw0kX9rz7tQAC7i4AAu6RsEpU_iAgu_9-aS4E'
block_sticker = 'CAACAgIAAxkBAAEHi4lj2pJS89tE80V_ZHZuAc2G046hYAACGSsAAgREqErosNZKKuXTDC4E'
balance_sticker = 'CAACAgIAAxkBAAEHi5Zj2pUrlw0OKm70CCTKPpUB9KqN9gACVyUAAsoEqUp6NgKY6HXb-S4E'
error_sticker = 'CAACAgIAAxkBAAEHi5Fj2pUO7WE5dh8RaOOAzL-5LslsIAACkCwAAvLrqUr7GbPrm5Xk9C4E'

menu = '''
üî• <b>–ú–µ–Ω—é:</b>

üí∞ <b>–ö—É—Ä—Å –ë–∏—Ç–∫–æ–∏–Ω–∞:</b> –ü–æ–ª—É—á–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –ë–∏—Ç–∫–æ–∏–Ω–∞ –Ω–∞ Blockchain
üîç <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫:</b> –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –±–ª–æ–∫–µ –≤ —Å–µ—Ç–∏ –ë–∏—Ç–∫–æ–∏–Ω, –≤–∫–ª—é—á–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
üíº <b>–ë–∏—Ç–∫–æ–∏–Ω –∫–æ—à–µ–ª–µ–∫:</b> –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ë–∏—Ç–∫–æ–∏–Ω –∫–æ—à–µ–ª—å–∫–µ, –≤–∫–ª—é—á–∞—è –±–∞–ª–∞–Ω—Å, –æ–±—â—É—é —Å—É–º–º—É –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ –≤—ã–≤–æ–¥–æ–≤
üîó <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–µ:</b> –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –±–ª–æ–∫–µ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É
'''


@logger.catch
@dispatcher.message_handler(commands='start')
async def start_handler(message: types.Message):
    """–•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    username = message.from_user.username
    loguru.logger.info(f"–í–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ò–º—è: {full_name}, ID: {user_id}, —é–∑–µ—Ä–Ω–µ–π–º: {username}")
    await bot.send_sticker(chat_id=chat_id,
                           sticker=menu_sticker)
    await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
    await bot.send_message(chat_id=chat_id, text=menu, parse_mode='HTML', reply_markup=inline_keyboard)


@logger.catch
@dispatcher.message_handler(commands='last')
async def last_block_handler(message: types.Message):
    """–•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /last"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    username = message.from_user.username
    loguru.logger.info(f"–í–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /last –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ò–º—è: {full_name}, ID: {user_id}, —é–∑–µ—Ä–Ω–µ–π–º: {username}")
    await bot.send_sticker(chat_id=chat_id,
                           sticker=last_sticker)
    await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
    text = f'{await last_block()}'
    await bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML')
    await bot.send_chat_action(chat_id, types.ChatActions.UPLOAD_DOCUMENT)
    await asyncio.sleep(1)
    await bot.send_document(chat_id=chat_id, document=open('transactions.html', 'rb'), reply_markup=menu_keyboard)


@logger.catch
@dispatcher.message_handler(commands='exchange')
async def exchange_handler(message: types.Message):
    """–•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /exchange"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    username = message.from_user.username
    loguru.logger.info(
        f"–í–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /exchange –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ò–º—è: {full_name}, ID: {user_id}, —é–∑–µ—Ä–Ω–µ–π–º: {username}")
    await bot.send_sticker(chat_id=chat_id,
                           sticker=exchange_sticker)
    await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
    text = f'{await cryptocurrency_exchange_rate()}'
    await bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML', reply_markup=menu_keyboard)


@logger.catch
@dispatcher.message_handler(commands='block')
async def block_handler(message: types.Message, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /block"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    username = message.from_user.username
    msg_id = message.message_id
    loguru.logger.info(f"–í–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /block –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ò–º—è: {full_name}, ID: {user_id}, —é–∑–µ—Ä–Ω–µ–π–º: {username}")
    global msgg_id, stick_id, stickwel_id
    try:
        _, block_id = message.text.split()
        await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        stickwel_id = (await bot.send_sticker(chat_id=chat_id,
                                              sticker=block_sticker)).message_id
        await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
        text = f'{await block_by_number(block_id)}'
        await bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML')
        if text != '‚ùå –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π ID –±–ª–æ–∫–∞!':
            await bot.send_chat_action(chat_id, types.ChatActions.UPLOAD_DOCUMENT)
            await asyncio.sleep(1)
            await bot.send_document(chat_id=chat_id, document=open('transactions.html', 'rb'), reply_markup=menu_keyboard)
        else:
            await bot.delete_message(chat_id=chat_id, message_id=stickwel_id)
    except:
        stick_id = (await bot.send_sticker(chat_id=chat_id,
                                           sticker=block_sticker)).message_id
        await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
        await Form.block_id.set()
        msgg_id = (await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–ª–æ–∫–∞:")).message_id


@dispatcher.message_handler(state=Form.block_id)
async def process_block_id(message: types.Message, state: FSMContext):
    """
    Process block_id
    """
    chat_id = message.chat.id
    msg_id = message.message_id

    async with state.proxy() as data:
        data['block_id'] = message.text
        await state.finish()

    block_id = data['block_id']
    try:
        block_id = int(block_id)
    except ValueError:
        await bot.send_sticker(chat_id=chat_id,
                               sticker=error_sticker)
        await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
    await bot.delete_message(chat_id=chat_id, message_id=stick_id)
    await bot.delete_message(chat_id=chat_id, message_id=msgg_id)
    await bot.delete_message(chat_id=chat_id, message_id=msg_id)
    stickwel_id = (await bot.send_sticker(chat_id=chat_id,
                                          sticker=block_sticker)).message_id
    await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
    text = f'{await block_by_number(block_id)}'
    await bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML')
    if text != '‚ùå –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π ID –±–ª–æ–∫–∞!':
        await bot.send_chat_action(chat_id, types.ChatActions.UPLOAD_DOCUMENT)
        await asyncio.sleep(1)
        await bot.send_document(chat_id=chat_id, document=open('transactions.html', 'rb'), reply_markup=menu_keyboard)
    else:
        await bot.delete_message(chat_id=chat_id, message_id=stickwel_id)


@logger.catch
@dispatcher.message_handler(commands='balance')
async def balance_handler(message: types.Message):
    """–•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /balance"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    username = message.from_user.username
    msg_id = message.message_id
    global command
    command = msg_id
    loguru.logger.info(
        f"–í–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /balance –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ò–º—è: {full_name}, ID: {user_id}, —é–∑–µ—Ä–Ω–µ–π–º: {username}")
    try:
        _, addr = message.text.split()
        await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        text = f'{await btc_adress_balance(addr)}'
        if text != '‚ùå –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞!':
            await bot.send_sticker(chat_id=chat_id,
                                   sticker=balance_sticker)
        await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
        await bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML', reply_markup=menu_keyboard)
    except:
        global msgg_id, stick_id
        stick_id = (await bot.send_sticker(chat_id=chat_id,
                                           sticker=balance_sticker)).message_id
        await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
        await Form.addr.set()
        msgg_id = (await message.reply("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:")).message_id


@dispatcher.message_handler(state=Form.addr)
async def process_addr(message: types.Message, state: FSMContext):
    """
    Process address
    """
    chat_id = message.chat.id
    msg_id = message.message_id
    async with state.proxy() as data:
        data['addr'] = message.text
        await state.finish()
    addr = data['addr']
    await bot.delete_message(chat_id=chat_id, message_id=command)
    await bot.delete_message(chat_id=chat_id, message_id=stick_id)
    await bot.delete_message(chat_id=chat_id, message_id=msgg_id)
    await bot.delete_message(chat_id=chat_id, message_id=msg_id)
    text = f'{await btc_adress_balance(addr)}'
    if text != '‚ùå –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞!':
        await bot.send_sticker(chat_id=chat_id,
                               sticker=balance_sticker)
    await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
    await bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML', reply_markup=menu_keyboard)


# –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª –∑–∞–ø–æ–ª–Ω—è—Ç—å
@logger.catch
@dispatcher.message_handler(state='*', commands='cancel')
@dispatcher.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.finish()
    await message.reply('–û—Ç–º–µ–Ω–µ–Ω–æ')


@dispatcher.callback_query_handler(CallbackDataFilter(data='last'))
async def process_callback_last(callback_query: CallbackQuery):
    """–•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /last"""
    chat_id = callback_query.message.chat.id
    user_id = callback_query.message.from_user.id
    full_name = callback_query.message.from_user.full_name
    username = callback_query.message.from_user.username
    await bot.send_sticker(chat_id=chat_id,
                           sticker=last_sticker)
    await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
    text = f'{await last_block()}'
    await bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML')
    await bot.send_chat_action(chat_id, types.ChatActions.UPLOAD_DOCUMENT)
    await asyncio.sleep(1)
    await bot.send_document(chat_id=chat_id, document=open('transactions.html', 'rb'), reply_markup=menu_keyboard)


@dispatcher.callback_query_handler(CallbackDataFilter(data='exchange'))
async def process_callback_exchange(callback_query: CallbackQuery):
    """–•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /exchange"""
    chat_id = callback_query.message.chat.id
    user_id = callback_query.message.from_user.id
    full_name = callback_query.message.from_user.full_name
    username = callback_query.message.from_user.username
    await bot.send_sticker(chat_id=chat_id,
                           sticker=exchange_sticker)
    await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
    text = f'{await cryptocurrency_exchange_rate()}'
    await bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML', reply_markup=menu_keyboard)


@dispatcher.callback_query_handler(CallbackDataFilter(data='block'))
async def process_callback_block(callback_query: CallbackQuery):
    chat_id = callback_query.message.chat.id
    user_id = callback_query.message.from_user.id
    full_name = callback_query.message.from_user.full_name
    username = callback_query.message.from_user.username
    msg_id = callback_query.message.message_id
    global msgg_id, stick_id, stickwel_id
    stick_id = (await bot.send_sticker(chat_id=chat_id,
                                       sticker=block_sticker)).message_id
    await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
    await Form.block_id.set()
    message = await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–ª–æ–∫–∞:")
    msgg_id = message.message_id


@dispatcher.callback_query_handler(CallbackDataFilter(data='balance'))
async def process_callback_block(callback_query: CallbackQuery):
    chat_id = callback_query.message.chat.id
    user_id = callback_query.message.from_user.id
    full_name = callback_query.message.from_user.full_name
    username = callback_query.message.from_user.username
    msg_id = callback_query.message.message_id
    global command
    command = msg_id
    global msgg_id, stick_id
    stick_id = (await bot.send_sticker(chat_id=chat_id,
                                       sticker=balance_sticker)).message_id
    await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
    await Form.addr.set()
    message = await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:")
    msgg_id = message.message_id


@dispatcher.callback_query_handler(CallbackDataFilter(data='menu'))
async def process_callback_block(callback_query: CallbackQuery):
    chat_id = callback_query.message.chat.id
    user_id = callback_query.message.from_user.id
    full_name = callback_query.message.from_user.full_name
    username = callback_query.message.from_user.username
    loguru.logger.info(f"–í—ã–∑–≤–∞–Ω–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    await bot.send_sticker(chat_id=chat_id, sticker=menu_sticker)
    await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
    await bot.send_message(chat_id=chat_id, text=menu, parse_mode='HTML', reply_markup=inline_keyboard)


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dispatcher)

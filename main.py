from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import Document, Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Filter
import loguru
import sys
from funcs import *
import requests
from blockcypher import get_block_overview
import asyncio
import os
import pickle
from loguru import logger
import threading
import time
import sqlite3
from aiogram.utils.exceptions import Throttled

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ auto_check_exchange(last_buy)
last_buy = 0


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def is_in_db(chat_id):
    conn = sqlite3.connect('subscribers.db')
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM subscribers WHERE chat_id=?", (chat_id,))
    rows = cursor.fetchone()
    if rows is not None:
        return True
    else:
        return False


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞
try:
    # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é data –∏–∑ —Ñ–∞–π–ª–∞ 'save.pkl'
    with open('save.pkl', 'rb') as read:
        API_TOKEN = pickle.load(read)
except:
    API_TOKEN = input('–í–≤–µ–¥–∏—Ç–µ API —Ç–æ–∫–µ–Ω:\n> ')
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é data –≤ —Ñ–∞–π–ª 'save.pkl'
    with open('save.pkl', 'wb') as write:
        pickle.dump(API_TOKEN, write)


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤ –æ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏, –µ—Å–ª–∏ –æ–Ω–æ —Ä–∞–≤–Ω–æ, –ª–∏–±–æ
# –ø—Ä–µ–≤—ã—à–∞–µ—Ç 2%
def auto_check_exchange(last_buy):
    r = requests.get('https://www.blockchain.com/ru/ticker').json()
    if last_buy != 0:
        if last_buy / float(r['RUB']['buy']) >= 1.02:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('subscribers.db')
            cursor = conn.cursor()

            # –í—ã–±–æ—Ä –≤—Å–µ—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("SELECT user_id FROM subscribers")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞
            ids = [x[0] for x in cursor.fetchall()]

            # –¶–∏–∫–ª –ø–æ –≤—Å–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º
            for usrid in ids:
                requests.post(f'https://api.telegram.org/bot{API_TOKEN}/sendMessage?chat_id={usrid}&text=‚ùó –ö—É—Ä—Å —É–ø–∞–ª '
                              f'–Ω–∞ {(last_buy / float(r["RUB"]["buy"])) * 100 - 100}%')
                asyncio.sleep(6)

            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            conn.close()
        elif float(r['RUB']['buy']) / last_buy >= 1.02:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('subscribers.db')
            cursor = conn.cursor()

            # –í—ã–±–æ—Ä –≤—Å–µ—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("SELECT id FROM subscribers")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞
            ids = [x[0] for x in cursor.fetchall()]

            # –¶–∏–∫–ª –ø–æ –≤—Å–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º
            for usrid in ids:
                requests.post(f'https://api.telegram.org/bot{API_TOKEN}/sendMessage?chat_id={usrid}&text=‚ùó –ö—É—Ä—Å –≤—ã—Ä–æ—Å '
                              f'–Ω–∞ {(last_buy / float(r["RUB"]["buy"])) * 100 - 100}%')

            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            conn.close()
    last_buy = r['RUB']['buy']


# –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π (–ø–æ—Ç–æ–∫ –Ω—É–∂–µ–Ω –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å –±–æ—Ç–æ–º)
t = threading.Timer(interval=900.0, function=auto_check_exchange, args=(last_buy,))
t.start()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
loguru.logger.add(
    "log.log",
    rotation="7 days",
    level="DEBUG"
)


# –§–∏–ª—å—Ç—Ä Callback –≤—ã–∑–æ–≤–æ–≤ Inline-–∫–Ω–æ–ø–æ–∫
class CallbackDataFilter(Filter):
    def __init__(self, data: str):
        self.data = data

    async def check(self, callback_query: CallbackQuery):
        return callback_query.data == self.data


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dispatcher = Dispatcher(bot, storage=storage)


async def anti_flood(*args, **kwargs):
    m = args[0]
    user_id = str(args[0]).split('"id":')[1].split(', "is_bot"')[0]
    loguru.logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º–º–µ—Ä: ID: {user_id}")
    await m.answer("–ù–µ —Å–ø–∞–º—å—Ç–µ, –∏–Ω–∞—á–µ –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")


loguru.logger.debug('–ë–æ—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω')


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class Form(StatesGroup):
    block_id = State()
    addr = State()


'''Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã'''
# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
button_last = InlineKeyboardButton('üîç –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫', callback_data='last')
button_exchange = InlineKeyboardButton('üí∞ –ö—É—Ä—Å –ë–∏—Ç–∫–æ–∏–Ω–∞', callback_data='exchange')
button_block = InlineKeyboardButton('üîó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–µ', callback_data='block')
button_balance = InlineKeyboardButton('üíº –ë–∏—Ç–∫–æ–∏–Ω –∫–æ—à–µ–ª–µ–∫', callback_data='balance')

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –≤–Ω–µ—Å–µ–Ω–∏–µ –≤ –Ω–µ–µ –∫–Ω–æ–ø–æ–∫
start_menu = InlineKeyboardMarkup()
start_menu.add(button_last)
start_menu.add(button_exchange)
start_menu.add(button_block)
start_menu.add(button_balance)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –º–µ–Ω—é
menu_keyboard = InlineKeyboardMarkup()
menu_button_text = InlineKeyboardButton('‚óÄÔ∏è –í –º–µ–Ω—é', callback_data='menu')
menu_keyboard.add(menu_button_text)

# –°—Ç–∏–∫–µ—Ä—ã –±–æ—Ç–∞ (–≤—ã–Ω–µ—Å–µ–Ω—ã –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
menu_sticker = 'CAACAgIAAxkBAAEHi25j2o75xyB-m8C3s4ITgCo7JWPEmQACph8AAv0RsEpbI3U8YSp1vy4E'
last_sticker = 'CAACAgIAAxkBAAEHi4Nj2pISiR7ub3J2ZJoFKgpZLkCFagACKCkAAtjzqErya_sR6K2N4i4E'
exchange_sticker = 'CAACAgIAAxkBAAEHi4Vj2pI1uvDP9bz6NoJuw0kX9rz7tQAC7i4AAu6RsEpU_iAgu_9-aS4E'
block_sticker = 'CAACAgIAAxkBAAEHi4lj2pJS89tE80V_ZHZuAc2G046hYAACGSsAAgREqErosNZKKuXTDC4E'
balance_sticker = 'CAACAgIAAxkBAAEHi5Zj2pUrlw0OKm70CCTKPpUB9KqN9gACVyUAAsoEqUp6NgKY6HXb-S4E'
error_sticker = 'CAACAgIAAxkBAAEHi5Fj2pUO7WE5dh8RaOOAzL-5LslsIAACkCwAAvLrqUr7GbPrm5Xk9C4E'
sub_sticker = 'CAACAgIAAxkBAAEHlDRj3WaudkWdYnI_-i9weZA5InsLWwACtSkAAnIHsEpATn7qYGoMBS4E'
unsub_sticker = 'CAACAgIAAxkBAAEHlDZj3WbOv1Q5yN9stdn_z42jDyEQXwACkCwAAvLrqUr7GbPrm5Xk9C4E'

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ–Ω—é (–≤—ã–Ω–µ—Å–µ–Ω–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
menu = '''
üî• <b>–ú–µ–Ω—é:</b>

üí∞ <b>–ö—É—Ä—Å –ë–∏—Ç–∫–æ–∏–Ω–∞:</b> –ü–æ–ª—É—á–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –ë–∏—Ç–∫–æ–∏–Ω–∞ –Ω–∞ Blockchain
üîç <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫:</b> –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –±–ª–æ–∫–µ –≤ —Å–µ—Ç–∏ –ë–∏—Ç–∫–æ–∏–Ω, –≤–∫–ª—é—á–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
üíº <b>–ë–∏—Ç–∫–æ–∏–Ω –∫–æ—à–µ–ª–µ–∫:</b> –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ë–∏—Ç–∫–æ–∏–Ω –∫–æ—à–µ–ª—å–∫–µ, –≤–∫–ª—é—á–∞—è –±–∞–ª–∞–Ω—Å, –æ–±—â—É—é —Å—É–º–º—É –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ –≤—ã–≤–æ–¥–æ–≤
üîó <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–µ:</b> –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –±–ª–æ–∫–µ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É
'''


@logger.catch
@dispatcher.message_handler(commands='start')
@dispatcher.throttled(anti_flood, rate=3)
async def start_handler(message: types.Message):
    """–•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    username = message.from_user.username
    message_id = message.message_id
    await bot.delete_message(chat_id=chat_id, message_id=message_id)
    loguru.logger.info(f"–í–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ò–º—è: {full_name}, ID: {user_id}, —é–∑–µ—Ä–Ω–µ–π–º: {username}")
    await bot.send_sticker(chat_id=chat_id,
                           sticker=menu_sticker)
    await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
    await bot.send_message(chat_id=chat_id, text=menu, parse_mode='HTML', reply_markup=start_menu)


@logger.catch
@dispatcher.message_handler(commands='last')
@dispatcher.throttled(anti_flood, rate=3)
async def last_block_handler(message: types.Message):
    """–•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /last"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    username = message.from_user.username
    message_id = message.message_id
    await bot.delete_message(chat_id=chat_id, message_id=message_id)
    loguru.logger.info(f"–í–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /last –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ò–º—è: {full_name}, ID: {user_id}, —é–∑–µ—Ä–Ω–µ–π–º: {username}")
    await bot.send_sticker(chat_id=chat_id,
                           sticker=last_sticker)
    await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
    wait_id = (await bot.send_message(chat_id, '‚öôÔ∏è <b>–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...</b>',
                                      parse_mode='HTML')).message_id
    text = f'{await last_block()}'
    await bot.edit_message_text(text=text, chat_id=chat_id, message_id=wait_id, parse_mode='HTML')
    await bot.send_chat_action(chat_id, types.ChatActions.UPLOAD_DOCUMENT)
    await asyncio.sleep(1)
    await bot.send_document(chat_id=chat_id, document=open('transactions.html', 'rb'), reply_markup=menu_keyboard)


@logger.catch
@dispatcher.message_handler(commands='exchange')
@dispatcher.throttled(anti_flood, rate=3)
async def exchange_handler(message: types.Message):
    """–•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /exchange"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    username = message.from_user.username
    message_id = message.message_id
    await bot.delete_message(chat_id=chat_id, message_id=message_id)
    loguru.logger.info(
        f"–í–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /exchange –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ò–º—è: {full_name}, ID: {user_id}, —é–∑–µ—Ä–Ω–µ–π–º: {username}")
    await bot.send_sticker(chat_id=chat_id,
                           sticker=exchange_sticker)
    await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
    text = f'{await cryptocurrency_exchange_rate()}'
    await bot.send_message(chat_id, text=text, parse_mode='HTML', reply_markup=menu_keyboard)


@logger.catch
@dispatcher.message_handler(commands='block')
@dispatcher.throttled(anti_flood, rate=3)
async def block_handler(message: types.Message, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /block"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    username = message.from_user.username
    msg_id = message.message_id
    loguru.logger.info(f"–í–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /block –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ò–º—è: {full_name}, ID: {user_id}, —é–∑–µ—Ä–Ω–µ–π–º: {username}")
    global msgg_id, stick_id, stickwel_id
    try:
        _, block_id = message.text.split()
        await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        stickwel_id = (await bot.send_sticker(chat_id=chat_id,
                                              sticker=block_sticker)).message_id
        await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
        text = f'{await block_by_number(block_id)}'
        wait_id = (
            await bot.send_message(chat_id, '‚öôÔ∏è <b>–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...</b>',
                                   parse_mode='HTML')).message_id
        await bot.edit_message_text(text=text, chat_id=chat_id, message_id=wait_id, parse_mode='HTML')
        if text != '‚ùå –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π ID –±–ª–æ–∫–∞!':
            await bot.send_chat_action(chat_id, types.ChatActions.UPLOAD_DOCUMENT)
            await asyncio.sleep(1)
            await bot.send_document(chat_id=chat_id, document=open('transactions.html', 'rb'),
                                    reply_markup=menu_keyboard)
        else:
            await bot.delete_message(chat_id=chat_id, message_id=stickwel_id)
    except:
        stick_id = (await bot.send_sticker(chat_id=chat_id,
                                           sticker=block_sticker)).message_id
        await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
        await Form.block_id.set()
        msgg_id = (await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–ª–æ–∫–∞:")).message_id


@dispatcher.message_handler(state=Form.block_id)
async def process_block_id(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ ID –ë–ª–æ–∫–∞
    """
    chat_id = message.chat.id
    msg_id = message.message_id

    async with state.proxy() as data:
        data['block_id'] = message.text
        await state.finish()

    block_id = data['block_id']
    try:
        block_id = int(block_id)
    except ValueError:
        await bot.send_sticker(chat_id=chat_id,
                               sticker=error_sticker)
        await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
    await bot.delete_message(chat_id=chat_id, message_id=stick_id)
    await bot.delete_message(chat_id=chat_id, message_id=msgg_id)
    await bot.delete_message(chat_id=chat_id, message_id=msg_id)
    stickwel_id = (await bot.send_sticker(chat_id=chat_id,
                                          sticker=block_sticker)).message_id
    await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
    text = f'{await block_by_number(block_id)}'
    wait_id = (await bot.send_message(chat_id, '‚öôÔ∏è <b>–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...</b>',
                                      parse_mode='HTML')).message_id
    await bot.edit_message_text(text=text, chat_id=chat_id, message_id=wait_id, parse_mode='HTML')
    if text != '‚ùå –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π ID –±–ª–æ–∫–∞!':
        await bot.send_chat_action(chat_id, types.ChatActions.UPLOAD_DOCUMENT)
        await asyncio.sleep(1)
        await bot.send_document(chat_id=chat_id, document=open('transactions.html', 'rb'), reply_markup=menu_keyboard)
    else:
        await bot.delete_message(chat_id=chat_id, message_id=stickwel_id)


@logger.catch
@dispatcher.message_handler(commands='balance')
@dispatcher.throttled(anti_flood, rate=3)
async def balance_handler(message: types.Message):
    """–•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /balance"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    username = message.from_user.username
    msg_id = message.message_id
    global command
    command = msg_id
    loguru.logger.info(
        f"–í–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /balance –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ò–º—è: {full_name}, ID: {user_id}, —é–∑–µ—Ä–Ω–µ–π–º: {username}")
    try:
        _, addr = message.text.split()
        await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        text = f'{await btc_adress_balance(addr)}'
        if text != '‚ùå –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞!':
            await bot.send_sticker(chat_id=chat_id,
                                   sticker=balance_sticker)
        await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
        await bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML', reply_markup=menu_keyboard)
    except:
        global msgg_id, stick_id
        stick_id = (await bot.send_sticker(chat_id=chat_id,
                                           sticker=balance_sticker)).message_id
        await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
        await Form.addr.set()
        msgg_id = (await message.reply("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:")).message_id


@dispatcher.message_handler(state=Form.addr)
async def process_addr(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ BTC –∞–¥—Ä–µ—Å—Å–∞
    """
    chat_id = message.chat.id
    msg_id = message.message_id
    async with state.proxy() as data:
        data['addr'] = message.text
        await state.finish()
    addr = data['addr']
    await bot.delete_message(chat_id=chat_id, message_id=command)
    await bot.delete_message(chat_id=chat_id, message_id=stick_id)
    await bot.delete_message(chat_id=chat_id, message_id=msgg_id)
    await bot.delete_message(chat_id=chat_id, message_id=msg_id)
    text = f'{await btc_adress_balance(addr)}'
    if text != '‚ùå –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞!':
        await bot.send_sticker(chat_id=chat_id,
                               sticker=balance_sticker)
    await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
    await bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML', reply_markup=menu_keyboard)


# –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª –∑–∞–ø–æ–ª–Ω—è—Ç—å
@logger.catch
@dispatcher.message_handler(state='*', commands='cancel')
@dispatcher.throttled(anti_flood, rate=3)
@dispatcher.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ state –≤ —Å–ª—É—á–∞–µ –≤–≤–æ–¥–∞ /cancel"""
    loguru.logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /cancel")
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.finish()
    await message.reply('–û—Ç–º–µ–Ω–µ–Ω–æ')


@dispatcher.callback_query_handler(CallbackDataFilter(data='last'))
async def process_callback_last(callback_query: CallbackQuery):
    """–•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /last"""
    loguru.logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    chat_id = callback_query.message.chat.id
    await bot.send_sticker(chat_id=chat_id,
                           sticker=last_sticker)
    await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
    wait_id = (await bot.send_message(chat_id, '‚öôÔ∏è <b>–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...</b>',
                                      parse_mode='HTML')).message_id
    text = f'{await last_block()}'
    await bot.edit_message_text(text=text, chat_id=chat_id, message_id=wait_id, parse_mode='HTML')
    await bot.send_chat_action(chat_id, types.ChatActions.UPLOAD_DOCUMENT)
    await asyncio.sleep(1)
    await bot.send_document(chat_id=chat_id, document=open('transactions.html', 'rb'), reply_markup=menu_keyboard)


@dispatcher.callback_query_handler(CallbackDataFilter(data='exchange'))
async def process_callback_exchange(callback_query: CallbackQuery):
    """CallbackDataFilter –∫–Ω–æ–ø–∫–∏ exchange"""
    loguru.logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∫—É—Ä—Å BTC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    chat_id = callback_query.message.chat.id
    user_id = callback_query.message.from_user.id
    await bot.send_sticker(chat_id=chat_id,
                           sticker=exchange_sticker)
    await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
    text = f'{await cryptocurrency_exchange_rate()}'
    await bot.send_message(chat_id, text=text, parse_mode='HTML', reply_markup=menu_keyboard)


@dispatcher.callback_query_handler(CallbackDataFilter(data='block'))
async def process_callback_block(callback_query: CallbackQuery):
    """CallbackDataFilter –∫–Ω–æ–ø–∫–∏ block"""
    loguru.logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    chat_id = callback_query.message.chat.id
    global msgg_id, stick_id, stickwel_id
    stick_id = (await bot.send_sticker(chat_id=chat_id,
                                       sticker=block_sticker)).message_id
    await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
    await Form.block_id.set()
    message = await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–ª–æ–∫–∞:")
    msgg_id = message.message_id


@dispatcher.callback_query_handler(CallbackDataFilter(data='balance'))
async def process_callback_balance(callback_query: CallbackQuery):
    """CallbackDataFilter –∫–Ω–æ–ø–∫–∏ balance"""
    loguru.logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    chat_id = callback_query.message.chat.id
    msg_id = callback_query.message.message_id
    global command
    command = msg_id
    global msgg_id, stick_id
    stick_id = (await bot.send_sticker(chat_id=chat_id,
                                       sticker=balance_sticker)).message_id
    await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
    await Form.addr.set()
    message = await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:")
    msgg_id = message.message_id


@dispatcher.callback_query_handler(CallbackDataFilter(data='menu'))
async def process_callback_menu(callback_query: CallbackQuery):
    """CallbackDataFilter –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"""
    chat_id = callback_query.message.chat.id
    loguru.logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    await bot.send_sticker(chat_id=chat_id, sticker=menu_sticker)
    await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
    await bot.send_message(chat_id=chat_id, text=menu, parse_mode='HTML', reply_markup=start_menu)


@dispatcher.message_handler(commands='subscribe')
@dispatcher.throttled(anti_flood, rate=3)
async def subscribe_handler(message: types.Message):
    """–•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /subscribe"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    username = message.from_user.username
    msg_id = message.message_id
    await bot.delete_message(chat_id=chat_id, message_id=msg_id)
    loguru.logger.info(
        f"–í–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /subscribe –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ò–º—è: {full_name}, ID: {user_id}, —é–∑–µ—Ä–Ω–µ–π–º: {username}")
    if is_in_db(chat_id):
        await bot.send_sticker(chat_id, error_sticker)
        await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
        await bot.send_message(chat_id=chat_id, text='‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞', parse_mode='HTML',
                               reply_markup=menu_keyboard)
    else:
        conn = sqlite3.connect('subscribers.db')  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        c = conn.cursor()

        c.execute('CREATE TABLE IF NOT EXISTS subscribers (chat_id INTEGER)')  # —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        c.execute('INSERT INTO subscribers (chat_id) VALUES (?)',
                  (chat_id,))  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±–µ—Ü id –∑–Ω–∞—á–µ–Ω–∏—è user_id

        conn.commit()
        conn.close()
        await bot.send_sticker(chat_id, sub_sticker)
        await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
        loguru.logger.info(f"–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: ID{chat_id}")
        await bot.send_message(chat_id=chat_id, text='‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞', parse_mode='HTML',
                               reply_markup=menu_keyboard)


@dispatcher.message_handler(commands='unsubscribe')
@dispatcher.throttled(anti_flood, rate=3)
async def unsubscribe_handler(message: types.Message):
    """–•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /unsubscribe"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    username = message.from_user.username
    msg_id = message.message_id
    await bot.delete_message(chat_id=chat_id, message_id=msg_id)
    loguru.logger.info(
        f"–í–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /unsubscribe –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ò–º—è: {full_name}, ID: {user_id}, —é–∑–µ—Ä–Ω–µ–π–º: {username}")
    if is_in_db(chat_id):
        conn = sqlite3.connect('subscribers.db')
        c = conn.cursor()

        c.execute("DELETE FROM subscribers WHERE chat_id=?", (chat_id,))

        conn.commit()
        conn.close()
        await bot.send_sticker(chat_id, unsub_sticker)
        await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
        await bot.send_message(chat_id=chat_id, text='‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', parse_mode='HTML',
                               reply_markup=menu_keyboard)
    else:
        await bot.send_sticker(chat_id, error_sticker)
        await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
        await bot.send_message(chat_id=chat_id, text='‚ùå –í—ã –µ—â–µ –Ω–µ –æ—Ñ–æ—Ä–º–ª—è–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É', parse_mode='HTML',
                               reply_markup=menu_keyboard)


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dispatcher)
